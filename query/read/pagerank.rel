def Edges = x, y : exists(w : M(x, y, w) and w > 0) // can change the value of w > 0
def Vertex(x) = Edges(x,_) or Edges(_,x)

def outdegree[nodeid] = count[Edges[nodeid]]
def mypagerank(nodeid, stepid, prvalue) =
    Vertex(nodeid) and
    stepid = 0 and
    prvalue = 1.0/count[Vertex]

def damping_factor = 0.85

def mypagerank(nodeid, stepid, prvalue) =
    stepid = range[1,10,1] and
    Vertex(nodeid) and
    prvalue = (1-damping_factor)/count[Vertex] + damping_factor*tmp_prvalue and
    tmp_prvalue = a + sum[
        neighbor, internal_pr :
            (
                Edges(neighbor, nodeid) and
                internal_pr = mypagerank[neighbor, stepid-1]/outdegree[neighbor]
            ) or
            (
                neighbor = 0 and internal_pr = 0.0
            )
    ] and
    (
        outdegree(nodeid, _) and a = 0.0 or
        not outdegree(nodeid, _) and a = mypagerank[nodeid, stepid-1]
    )
    from a,tmp_prvalue